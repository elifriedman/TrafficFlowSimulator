#######################################
#######  Algorithm parameters #########
#######################################

#w: the weights for the TRPF. Weights are stored in the format t1:v1,t2:v2,...
#   where t1 is a threshold above the System Optimum and v1 is the actual weight.
#   in other words, "30:2" means that if there are more than 30 drivers above the 
#   System Optimum for a route, than the drivers on that route could report a
#   congestion level of 2
w = 10:3, 20:5, 50:7

#p: 0<=p<=1 Fraction of agents using the TRPF
#           When an agent is initialized, it will "decide" whether to use the 
#           TRPF by choosing a random number from 0 to 1 and seeing if it's 
#           less than p. If it is, it will use the TRPF. If not, it won't.
p = 1.0

#T: Number of previous rounds to use for calculating the TRPF
#   The TRPF = sum_over_weights(weight*num_agents_reported_that_weight)/num_agents_reporting
#            = sum_over_agents(weight_this_agent_reported)/num_agents_reporting
T = 3

#######################################
#########  Model parameters ###########
#######################################

#num_agents: The total number of agents travelling
num_agents = 200

#G: 0<=G<=1 Fraction of agents who will change routes from one round to the next.
#           Whenever an agent needs to choose a route, it will pick a random 
#           number. If the number is less than G, than it chooses a new route.
#           otherwise, it uses the same route as last time.
G = 0.2

#road_network_filename: file specifying the road network as an edge list
road_network_filename = roadnet.csv

#routeN: a possible route for agents to use.
#        Note that route numbering starts at 1 and should be consecutive
route1 = A,C,G,J,I,L
route2 = A,C,G,J,L
route3 = A,C,F,I,L
route4 = A,C,D,G,J,I,L
route5 = A,C,D,G,J,L
route6 = A,D,G,J,I,L
route7 = A,D,G,J,L
route8 = A,C,G,F,I,L
route9 = A,C,D,H,K,M
route10 = A,C,G,J,K,M
route11 = A,C,G,H,K,M
route12 = A,D,H,K,M
route13 = A,C,G,J,M
route14 = A,C,G,K,M
route15 = A,B,E,H,K,M
route16 = A,C,D,E,H,K,M
route17 = B,D,G,J,I,L
route18 = B,D,G,J,L
route19 = B,A,C,G,J,I,L
route20 = B,A,C,G,J,L
route21 = B,A,C,F,I,L
route22 = B,E,D,G,J,I,L
route23 = B,A,C,D,G,J,I,L
route24 = B,E,D,G,J,L
route25 = B,E,H,K,M
route26 = B,D,H,K,M
route27 = B,D,E,H,K,M
route28 = B,E,D,H,K,M
route29 = B,D,G,J,K,M
route30 = B,D,G,H,K,M
route31 = B,A,C,D,H,K,M
route32 = B,D,G,J,M

#routeN.opt: the number of agents that should travel along routeN in the 
#            System Optimum. Note that this is a function of num_agents
route1.opt = 0
route2.opt = 109
route3.opt = 376
route4.opt = 0
route5.opt = 0
route6.opt = 0
route7.opt = 145
route8.opt = 0
route9.opt = 0
route10.opt = 0
route11.opt = 0
route12.opt = 154
route13.opt = 25
route14.opt = 154
route15.opt = 0
route16.opt = 0
route17.opt = 0
route18.opt = 41
route19.opt = 0
route20.opt = 0
route21.opt = 0
route22.opt = 0
route23.opt = 0
route24.opt = 0
route25.opt = 340
route26.opt = 84
route27.opt = 0
route28.opt = 0
route29.opt = 0
route30.opt = 0
route31.opt = 0
route32.opt = 272

#########################################
#########  Simulation parameters ########
#########################################

num_iterations = 100
